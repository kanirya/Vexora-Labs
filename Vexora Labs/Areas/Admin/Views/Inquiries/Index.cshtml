@model IEnumerable<ServiceInquiryViewModel>
@{
    ViewData["Title"] = "Service Inquiries";
    ViewData["PageCss"] = "admin-inquiries.css";

}
@using Newtonsoft.Json


<div class="dashboard-container">
    <div class="dashboard-header">
        <div>
            <h1 class="dashboard-title">Service Inquiries</h1>
            <p class="dashboard-subtitle">Manage and respond to client service requests</p>
        </div>
      
    </div>

    <div class="search-filter-bar">
        <div class="search-container">
            <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
            </svg>
            <input type="text" id="searchInput" class="search-input" placeholder="Search by name, email, or company...">
        </div>

        <div class="filter-dropdown">
            <button id="serviceFilterBtn" class="filter-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2z"/>
                </svg>
                <span>Service Type</span>
            </button>
            <div id="serviceFilterMenu" class="filter-menu">
                <div class="filter-option active" data-value="all">All Services</div>
                <div class="filter-option" data-value="Web Development">Web Development</div>
                <div class="filter-option" data-value="Mobile App">Mobile App</div>
                <div class="filter-option" data-value="UI/UX Design">UI/UX Design</div>
                <div class="filter-option" data-value="Consulting">Consulting</div>
                <div class="filter-option" data-value="Other">Other</div>
            </div>
        </div>

        <div class="filter-dropdown">
            <button id="budgetFilterBtn" class="filter-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M4 10.781c.148 1.667 1.513 2.85 3.591 3.003V15h1.043v-1.216c2.27-.179 3.678-1.438 3.678-3.3 0-1.59-.947-2.51-2.956-3.028l-.722-.187V3.467c1.122.11 1.879.714 2.07 1.616h1.47c-.166-1.6-1.54-2.748-3.54-2.875V1H7.591v1.233c-1.939.23-3.27 1.472-3.27 3.156 0 1.454.966 2.483 2.661 2.917l.61.162v4.031c-1.149-.17-1.94-.8-2.131-1.718H4zm3.391-3.836c-1.043-.263-1.6-.825-1.6-1.616 0-.944.704-1.641 1.8-1.828v3.495l-.2-.05zm1.591 1.872c1.287.323 1.852.859 1.852 1.769 0 1.097-.826 1.828-2.2 1.939V8.73l.348.086z"/>
                </svg>
                <span>Budget</span>
            </button>
            <div id="budgetFilterMenu" class="filter-menu">
                <div class="filter-option active" data-value="all">All Budgets</div>
                <div class="filter-option" data-value="Less than $5,000">Less than $5,000</div>
                <div class="filter-option" data-value="$5,000 - $10,000">$5,000 - $10,000</div>
                <div class="filter-option" data-value="$10,000 - $25,000">$10,000 - $25,000</div>
                <div class="filter-option" data-value="$25,000+">$25,000+</div>
            </div>
        </div>
    </div>

    @if (Model != null && Model.Any())
    {
        <div id="inquiryList" class="inquiry-list">
            @foreach (var inquiry in Model)
            {
                <div class="inquiry-row" 
                     data-id="@inquiry.Id" 
                     data-name="@inquiry.FullName.ToLower()" 
                     data-email="@inquiry.Email.ToLower()" 
                     data-phone="@inquiry.Phone"
                     data-company="@(inquiry.Company?.ToLower() ?? "")" 
                     data-service="@inquiry.ServiceType" 
                     data-budget="@(inquiry.ProjectBudget?.ToLower() ?? "")">
                    <div class="inquiry-content">
                        <div class="inquiry-avatar">
                            @inquiry.FullName.Substring(0, 1)
                        </div>
                        <div class="inquiry-details">
                            <h3 class="inquiry-name">@inquiry.FullName</h3>
                            <p class="inquiry-email">@inquiry.Email</p>
                            <a class="d-flex" href="tel:+92{@inquiry.Phone}">
                                <i class="fa-solid fa-phone mx-2"></i>
                                <p class="inquiry-phone " style="font-weight:400;color:grey">@inquiry.Phone</p>
</a>
                            <div class="inquiry-meta">
                                <span class="inquiry-tag inquiry-tag-service">@inquiry.ServiceType</span>
                                @if (!string.IsNullOrEmpty(inquiry.ProjectBudget))
                                {
                                    <span class="inquiry-tag inquiry-tag-budget">@inquiry.ProjectBudget</span>
                                }
                                @if (!string.IsNullOrEmpty(inquiry.ProjectTimeline))
                                {
                                    <span class="inquiry-tag inquiry-tag-timeline">@inquiry.ProjectTimeline</span>
                                }
                                <span class="inquiry-tag inquiry-tag-newsletter">
                                    @(inquiry.Newsletter ? "Newsletter: Yes" : "Newsletter: No")
                                </span>
                            </div>
                        </div>
                    
<button class="btn btn-gradient" onclick="openConfirmDialog(@inquiry.Id)">Approved</button>


                    </div>
                    <div id="description-@inquiry.Id" class="inquiry-description">
                        <div class="description-label">Project Description</div>
                        <div class="description-text">@inquiry.ProjectDescription</div>
                    </div>
                </div>
            }
        </div>
        
        <div class="pagination">
            <button class="page-link" id="prevPage">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
                </svg>
            </button>
            <div id="paginationNumbers">
                <button class="page-link active">1</button>
                <button class="page-link">2</button>
                <button class="page-link">3</button>
            </div>
            <button class="page-link" id="nextPage">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
                </svg>
            </button>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M4.98 4a.5.5 0 0 0-.39.188L1.54 8H6a.5.5 0 0 1 .5.5 1.5 1.5 0 1 0 3 0A.5.5 0 0 1 10 8h4.46l-3.05-3.812A.5.5 0 0 0 11.02 4H4.98zm-1.17-.437A1.5 1.5 0 0 1 4.98 3h6.04a1.5 1.5 0 0 1 1.17.563l3.7 4.625a.5.5 0 0 1 .106.374l-.39 3.124A1.5 1.5 0 0 1 14.117 13H1.883a1.5 1.5 0 0 1-1.489-1.314l-.39-3.124a.5.5 0 0 1 .106-.374l3.7-4.625z"/>
                </svg>
            </div>
            <h3 class="empty-state-title">No inquiries found</h3>
            <p class="empty-state-description">There are no service inquiries to display at this time.</p>
            <button class="btn btn-primary">Refresh</button>
        </div>
    }
</div>

<div id="confirmModal" style="display:none; position:fixed; top:50%; left:50%;
    transform:translate(-50%, -50%); background:white; padding:20px;
    box-shadow:0 0 15px rgba(0,0,0,0.4); border-radius:8px; z-index:9999;">
    <p>Are you sure you want to approve?</p>
    <form id="approveForm" method="post" asp-action="Approve">
        <input type="hidden" name="id" id="hiddenId" />
        <button type="submit" class="btn btn-success">Approve</button>
        <button type="button" onclick="closeDialog()" class="btn btn-secondary">Cancel</button>
    </form>
</div>

<div id="modalOverlay" style="display:none; position:fixed; top:0; left:0; width:100%;
    height:100%; background:rgba(0,0,0,0.5); z-index:9998;"></div>


<!-- Modal for detailed view -->
<div id="detailModal" class="modal-backdrop">
    <div class="modal">
        <div class="modal-header">
            <h2 class="modal-title" id="modalTitle">Inquiry Details</h2>
            <button class="modal-close" id="closeModal">&times;</button>
        </div>
        <div class="modal-body" id="modalBody">
            <!-- Content will be dynamically populated -->
        </div>
        <div class="modal-footer">
            <button class="btn btn-secondary" id="closeModalBtn">Close</button>
            <button class="btn btn-primary" id="replyBtn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"/>
                </svg>
                Reply
            </button>
        </div>
    </div>
</div>

<script>

    function openConfirmDialog(id) {
        document.getElementById("hiddenId").value = id;
        document.getElementById("confirmModal").style.display = "block";
        document.getElementById("modalOverlay").style.display = "block";
    }

    function closeDialog() {
        document.getElementById("confirmModal").style.display = "none";
        document.getElementById("modalOverlay").style.display = "none";
    }

    // Theme toggle functionality
    document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.getElementById('themeToggle');
        const themeText = document.getElementById('themeText');
        const body = document.body;
        
        // Check for saved theme preference
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme === 'dark') {
            body.classList.add('theme-dark');
            themeText.textContent = 'Light Mode';
            updateThemeIcon(true);
        }
        
        themeToggle.addEventListener('click', function() {
            body.classList.toggle('theme-dark');
            const isDark = body.classList.contains('theme-dark');
            themeText.textContent = isDark ? 'Light Mode' : 'Dark Mode';
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            updateThemeIcon(isDark);
        });
        
        function updateThemeIcon(isDark) {
            const iconContainer = themeToggle.querySelector('svg');
            if (isDark) {
                iconContainer.innerHTML = '<path d="M8 12a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>';
            } else {
                iconContainer.innerHTML = '<path d="M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z"/>';
            }
        }
        
        // Filter dropdown functionality
        const serviceFilterBtn = document.getElementById('serviceFilterBtn');
        const serviceFilterMenu = document.getElementById('serviceFilterMenu');
        const budgetFilterBtn = document.getElementById('budgetFilterBtn');
        const budgetFilterMenu = document.getElementById('budgetFilterMenu');
        
        serviceFilterBtn.addEventListener('click', function() {
            serviceFilterMenu.classList.toggle('show');
            budgetFilterMenu.classList.remove('show');
        });
        
        budgetFilterBtn.addEventListener('click', function() {
            budgetFilterMenu.classList.toggle('show');
            serviceFilterMenu.classList.remove('show');
        });
        
        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (!serviceFilterBtn.contains(event.target) && !serviceFilterMenu.contains(event.target)) {
                serviceFilterMenu.classList.remove('show');
            }
            
            if (!budgetFilterBtn.contains(event.target) && !budgetFilterMenu.contains(event.target)) {
                budgetFilterMenu.classList.remove('show');
            }
            
            // Close all action menus when clicking outside
            const actionMenus = document.querySelectorAll('.action-menu.show');
            actionMenus.forEach(menu => {
                const button = menu.previousElementSibling;
                if (!menu.contains(event.target) && !button.contains(event.target)) {
                    menu.classList.remove('show');
                }
            });
        });
        
        // Filter options functionality
        const serviceOptions = serviceFilterMenu.querySelectorAll('.filter-option');
        const budgetOptions = budgetFilterMenu.querySelectorAll('.filter-option');
        
        serviceOptions.forEach(option => {
            option.addEventListener('click', function() {
                serviceOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                serviceFilterBtn.querySelector('span').textContent = this.textContent;
                serviceFilterMenu.classList.remove('show');
                applyFilters();
            });
        });
        
        budgetOptions.forEach(option => {
            option.addEventListener('click', function() {
                budgetOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                budgetFilterBtn.querySelector('span').textContent = this.textContent;
                budgetFilterMenu.classList.remove('show');
                applyFilters();
            });
        });
        
        // Search functionality
        const searchInput = document.getElementById('searchInput');
        searchInput.addEventListener('input', applyFilters);
        
        function applyFilters() {
            const searchValue = searchInput.value.toLowerCase();
            const serviceValue = serviceFilterMenu.querySelector('.filter-option.active').getAttribute('data-value');
            const budgetValue = budgetFilterMenu.querySelector('.filter-option.active').getAttribute('data-value');
            
            const inquiryRows = document.querySelectorAll('.inquiry-row');
            
            inquiryRows.forEach(row => {
                const nameMatch = row.getAttribute('data-name').includes(searchValue);
                const emailMatch = row.getAttribute('data-email').includes(searchValue);
                const companyMatch = row.getAttribute('data-company').includes(searchValue);
                const serviceMatch = serviceValue === 'all' || row.getAttribute('data-service') === serviceValue.toLowerCase();
                const budgetMatch = budgetValue === 'all' || row.getAttribute('data-budget').includes(budgetValue.toLowerCase());
                
                if ((nameMatch || emailMatch || companyMatch) && serviceMatch && budgetMatch) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            updatePagination();
        }
        
        // Pagination functionality
        const itemsPerPage = 5;
        let currentPage = 1;
        const prevPageBtn = document.getElementById('prevPage');
        const nextPageBtn = document.getElementById('nextPage');
        const paginationNumbers = document.getElementById('paginationNumbers');
        
        function updatePagination() {
            const visibleRows = Array.from(document.querySelectorAll('.inquiry-row')).filter(row => row.style.display !== 'none');
            const totalPages = Math.ceil(visibleRows.length / itemsPerPage);
            
            if (currentPage > totalPages) {
                currentPage = totalPages || 1;
            }
            
            // Update pagination numbers
            paginationNumbers.innerHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = document.createElement('button');
                pageButton.className = 'page-link' + (i === currentPage ? ' active' : '');
                pageButton.textContent = i;
                pageButton.addEventListener('click', function() {
                    currentPage = i;
                    showPage(currentPage);
                });
                
                paginationNumbers.appendChild(pageButton);
            }
            
            // Show current page
            showPage(currentPage);
            
            // Update prev/next buttons
            prevPageBtn.style.visibility = currentPage === 1 ? 'hidden' : 'visible';
            nextPageBtn.style.visibility = currentPage === totalPages || totalPages === 0 ? 'hidden' : 'visible';
        }
        
        function showPage(page) {
            const visibleRows = Array.from(document.querySelectorAll('.inquiry-row')).filter(row => row.style.display !== 'none');
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            
            visibleRows.forEach((row, index) => {
                if (index >= startIndex && index < endIndex) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Update active page number
            document.querySelectorAll('.page-link').forEach((link, index) => {
                link.classList.toggle('active', index + 1 === page);
            });
        }
        
        prevPageBtn.addEventListener('click', function() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });
        
        nextPageBtn.addEventListener('click', function() {
            const visibleRows = Array.from(document.querySelectorAll('.inquiry-row')).filter(row => row.style.display !== 'none');
            const totalPages = Math.ceil(visibleRows.length / itemsPerPage);
            
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
            }
        });
        
        // Initialize pagination
        updatePagination();
        
        // Modal functionality
        const detailModal = document.getElementById('detailModal');
        const closeModal = document.getElementById('closeModal');
        const closeModalBtn = document.getElementById('closeModalBtn');
        const modalBody = document.getElementById('modalBody');
        const modalTitle = document.getElementById('modalTitle');
        
        window.viewInquiryDetails = function(id) {
            const row = document.querySelector(`.inquiry-row[data-id="${id}"]`);
            
            if (row) {
                const name = row.querySelector('.inquiry-name').textContent;
                const email = row.querySelector('.inquiry-email').textContent;
                const serviceType = row.querySelector('.inquiry-tag-service').textContent;
                const description = row.querySelector('.description-text')?.textContent || 'No description provided';
                
                // Set modal title
                modalTitle.textContent = `Inquiry from ${name}`;
                
                // Build modal content
                modalBody.innerHTML = `
                    <div class="modal-section">
                        <h3 class="modal-section-title">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                                <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z"/>
                            </svg>
                            Contact Information
                        </h3>
                        <div class="modal-grid">
                            <div class="modal-field">
                                <div class="modal-label">Full Name</div>
                                <div class="modal-value">${name}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Email Address</div>
                                <div class="modal-value">${email}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Phone Number</div>
                                <div class="modal-value">${row.getAttribute('data-phone') || 'Not provided'}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Company</div>
                                <div class="modal-value">${row.getAttribute('data-company') || 'Not provided'}</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="modal-section">
                        <h3 class="modal-section-title">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5l2.404.961L10.404 2l-2.218-.887zm3.564 1.426L5.596 5 8 5.961 14.154 3.5l-2.404-.961zm3.25 1.7-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923l6.5 2.6zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464L7.443.184z"/>
                            </svg>
                            Project Details
                        </h3>
                        <div class="modal-grid">
                            <div class="modal-field">
                                <div class="modal-label">Service Type</div>
                                <div class="modal-value">${serviceType}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Project Budget</div>
                                <div class="modal-value">${row.querySelector('.inquiry-tag-budget')?.textContent || 'Not specified'}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Project Timeline</div>
                                <div class="modal-value">${row.querySelector('.inquiry-tag-timeline')?.textContent || 'Not specified'}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">How They Found Us</div>
                                <div class="modal-value">${row.getAttribute('data-source') || 'Not specified'}</div>
                            </div>
                        </div>
                        
                        <div class="modal-field" style="margin-top: 1rem;">
                            <div class="modal-label">Project Description</div>
                            <div class="modal-description">${description}</div>
                        </div>
                    </div>
                    
                    <div class="modal-section">
                        <h3 class="modal-section-title">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                                <path d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                            </svg>
                            Additional Information
                        </h3>
                        <div class="modal-grid">
                            <div class="modal-field">
                                <div class="modal-label">Newsletter Subscription</div>
                                <div class="modal-value">${row.querySelector('.inquiry-tag-newsletter').textContent.includes('Yes') ? 'Subscribed' : 'Not subscribed'}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Privacy Policy</div>
                                <div class="modal-value">Agreed</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Inquiry ID</div>
                                <div class="modal-value">${id}</div>
                            </div>
                            <div class="modal-field">
                                <div class="modal-label">Submission Date</div>
                                <div class="modal-value">${new Date().toLocaleDateString()}</div>
                            </div>
                        </div>
                    </div>
                `;
                
                // Show modal
                detailModal.classList.add('show');
            }
        };
        
        closeModal.addEventListener('click', function() {
            detailModal.classList.remove('show');
        });
        
        closeModalBtn.addEventListener('click', function() {
            detailModal.classList.remove('show');
        });
        
        detailModal.addEventListener('click', function(e) {
            if (e.target === detailModal) {
                detailModal.classList.remove('show');
            }
        });
        
        // Toggle description functionality
        window.toggleDescription = function(id) {
            const description = document.getElementById(`description-${id}`);
            description.classList.toggle('expanded');
            
            // Update the menu item text
            const row = document.querySelector(`.inquiry-row[data-id="${id}"]`);
            const actionMenu = row.querySelector('.action-menu');
            const actionItem = actionMenu.querySelector('.action-item:nth-child(2)');
            const actionText = actionItem.querySelector('.action-item-text');
            
            if (description.classList.contains('expanded')) {
                actionText.textContent = 'Hide Description';
            } else {
                actionText.textContent = 'Show Description';
            }
            
            // Close the action menu
            actionMenu.classList.remove('show');
        };
        
        // Toggle action menu
        window.toggleActionMenu = function(button) {
            const menu = button.nextElementSibling;
            
            // Close all other open menus first
            document.querySelectorAll('.action-menu.show').forEach(openMenu => {
                if (openMenu !== menu) {
                    openMenu.classList.remove('show');
                }
            });
            
            // Toggle this menu
            menu.classList.toggle('show');
        };
        
        // Reply button functionality
        document.getElementById('replyBtn').addEventListener('click', function() {
            alert('Reply functionality would be implemented here.');
            detailModal.classList.remove('show');
        });
    });
</script>